.QWidget {
   background-color: beige;   
}

/* Nice Windows-XP-style password character. */
QLineEdit[echoMode="2"] {
    lineedit-password-character: 9679;
}

/* We provide a min-width and min-height for push buttons
   so that they look elegant regardless of the width of the text. */
QPushButton {
    background-color: palegoldenrod;
    border-width: 2px;
    border-color: darkkhaki;
    border-style: solid;
    border-radius: 5;
    padding: 3px;
    min-width: 9ex;
    min-height: 2.5ex;
	font: 20px;
}

QPushButton:hover {
   background-color: khaki;
}

/* Increase the padding, so the text is shifted when the button is
   pressed. */
QPushButton:pressed {
    padding-left: 5px;
    padding-top: 5px;
    background-color: #d0d67c;
}

QAbstractButton {
    font: bold;
}

QDateEdit{
	font: 20px;
	margin:	0;
	padding: 0;
	text-indent: 0;
}

QLabel {
font: bold;
color:red;
margin:	0;
padding: 0;
text-align:center;
}

/* We reserve 1 pixel space in padding. When we get the focus,
   we kill the padding and enlarge the border. This makes the items
   glow. */
QLineEdit, QFrame {
    border-width: 2px;
    padding: 1px;
    border-style: solid;
    border-color: darkkhaki;
    border-radius: 5px;
	font: 20px;
	margin:	0;
	padding: 0;
	width:80%;
	text-indent: 0;
}

/* As mentioned above, eliminate the padding and increase the border. */
QLineEdit:focus, QFrame:focus {
    border-width: 3px;
    padding: 0px;
}

/* A QLabel is a QFrame ... */
QLabel {
    border: none;
    padding: 0;
	margin-top:-20px;
    background: none;
	width:80%;
}

QFormWindow,FieldsForm {
background-color: #141E30;  /* fallback for old browsers */
font: 11pt "Times New Roman";
border-style:trasparent;
}